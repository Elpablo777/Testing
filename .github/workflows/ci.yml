name: CI/CD & Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      - name: Run Python tests
        run: |
          python3 -m unittest discover -s tests/python

  test-node:
    name: Node.js Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: |
          npm install
      - name: Run Node.js tests
        run: |
          npx mocha tests/node/*.js

  lint-python:
    name: Python Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install flake8
        run: |
          pip install flake8
      - name: Run flake8
        run: |
          flake8 src/ tests/python/

  lint-node:
    name: Node.js Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install ESLint
        run: |
          npm install eslint
      - name: Run ESLint
        run: |
          npx eslint frameworks/react/src/ lang/javascript/ tests/node/

  security:
    name: Security & Secrets Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: GitHub Advanced Security (Secret Scanning)
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript
      # Java, Rust, Go, C, C++, C#, Swift, Ruby, etc. werden nicht automatisch gebaut!
      # Für diese Sprachen ist ein manueller Build oder ein expliziter Ausschluss nötig.
      # Siehe https://docs.github.com/en/code-security/code-scanning/troubleshooting-code-scanning/automatic-build-failed
      # Beispiel für Java-Projekte: Manuelles Build statt Autobuild
      # Java: Nur kompilieren, wenn Main.java existiert (kein Maven/Gradle-Projekt)
      - name: Build Java (javac, falls kein Maven/Gradle)
        run: |
          if [ -f "lang/java/Main.java" ]; then
            javac lang/java/Main.java
          fi
      # Maven/Gradle nur, wenn pom.xml oder build.gradle existiert
      - name: Build with Maven (Java, falls benötigt)
        run: |
          if [ -f "pom.xml" ]; then
            mvn clean package -DskipTests
          fi
      - name: Build with Gradle (Java, falls benötigt)
        run: |
          if [ -f "build.gradle" ]; then
            ./gradlew build -x test
          fi
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  badges:
    name: Generate Badges
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Create status badge (Platzhalter)
        run: echo "Badges werden automatisch von GitHub generiert."

